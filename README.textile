!http://chattycrow.com/crow3logo.png!

h1. ChattyCrow - Node JS library


This library makes easier to call ChattyCrow API (http://chattycrow.com/).

h2. Installation

<pre>
npm install chattycrow
</pre>

h2. Usage

<pre>
var chattycrow = require('chattycrow').createClient('token', 'default_channel');
</pre>

h3. Optional parameters

Every sender and contacts methods header:

<pre>
send<Service>(payload, callback, contacts, options);
</pre>

h3. Email notification - TODO

Not yet implemented!

h3. IOS Push notification

<pre>
// Callback function
function pushResponse(res, body, err) {
  if (err) {
    console.log(err.message);
  }

  if (res) {
    console.log(res);
  }

  if (body) {
    console.log(body);
  }
}

// Send push
chattycrow.sendIos({ payload: { 'hello' }}, pushResponse, [ 'contacts', 'contact2' ], {channel: 'other', token: 'not_default'})
</pre>

h3. Android Push notification

<pre>
// Send message
chattycrow.sendAndroid({ payload: { data : { key1 : 'hello' }}, pushResponse, [ 'new_ios_id1', 'contact2' ], {channel: 'other', token: 'not_default'})
</pre>

h3. Skype notification

<pre>
// Send request
chattycrow.sendSkype('Skype message', pushResponse, [ 'skype', 'skype2' ])
</pre>

h3. Jabber notification

<pre>
// Send request
chattycrow.sendJabber('Jabber message', pushResponse)
</pre>


h3. SMS notification (only Czech Republic yet)

<pre>
// Sms notification
chattycrow.sendJabber('SMS message', pushResponse, [ '+420 123 456 789' ])
</pre>

h2. Working with contacts via API

It's actually very usable, you can automatically add or remove contacts in your application after user was registered.

h3. Contact list

<pre>
function contactList(res, body, err) {
  if (err) {
    console.log(err.message);
  }

  if (res) {
    console.log(res);
  }

  if (body) {
    console.log(body.contacts);
  }
}

// Get contacts
chattycrow.getContacts(contactList, { channel: 'other than default' })
</pre>

h3. Add contact

<pre>
function contactAddResult(res, body, err) {
  if (err) {
    console.log(err.message);
  }

  if (res) {
    console.log(res);
  }

  if (body) {
    console.log('Status: ' + body.status);
    console.log('Message: ' + body.msg);
    console.log('Stats: ' + body.stats.success + '/' + body.stats.exists + '/' + body.stats.failed);
  }
}

// Add contacts
chattycrow.addContacts(['test1', 'test2'], contactAddResult, { channel: 'other than default' })
</pre>

h3. Remove contact

<pre>
function contactRemoveResult(res, body, err) {
  if (err) {
    console.log(err.message);
  }

  if (res) {
    console.log(res);
  }

  if (body) {
    console.log('Status: ' + body.status);
    console.log('Message: ' + body.msg);
    console.log('Stats: ' + body.stats.success + '/' + body.stats.failed);
  }
}

// Add contacts
chattycrow.removeContacts(['test1', 'test2'], contactRemoveResult, { channel: 'other than default' });
</pre>
